// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Machine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Machine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Machine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Machine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Machine_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Machine_2eproto;
namespace Machine {
class MachineData;
struct MachineDataDefaultTypeInternal;
extern MachineDataDefaultTypeInternal _MachineData_default_instance_;
class MachineDatas;
struct MachineDatasDefaultTypeInternal;
extern MachineDatasDefaultTypeInternal _MachineDatas_default_instance_;
}  // namespace Machine
PROTOBUF_NAMESPACE_OPEN
template<> ::Machine::MachineData* Arena::CreateMaybeMessage<::Machine::MachineData>(Arena*);
template<> ::Machine::MachineDatas* Arena::CreateMaybeMessage<::Machine::MachineDatas>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Machine {

// ===================================================================

class MachineData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Machine.MachineData) */ {
 public:
  inline MachineData() : MachineData(nullptr) {}
  ~MachineData() override;
  explicit PROTOBUF_CONSTEXPR MachineData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachineData(const MachineData& from);
  MachineData(MachineData&& from) noexcept
    : MachineData() {
    *this = ::std::move(from);
  }

  inline MachineData& operator=(const MachineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachineData& operator=(MachineData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachineData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachineData* internal_default_instance() {
    return reinterpret_cast<const MachineData*>(
               &_MachineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MachineData& a, MachineData& b) {
    a.Swap(&b);
  }
  inline void Swap(MachineData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MachineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MachineData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachineData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachineData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Machine.MachineData";
  }
  protected:
  explicit MachineData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenominationFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional int32 denomination = 1;
  bool has_denomination() const;
  private:
  bool _internal_has_denomination() const;
  public:
  void clear_denomination();
  int32_t denomination() const;
  void set_denomination(int32_t value);
  private:
  int32_t _internal_denomination() const;
  void _internal_set_denomination(int32_t value);
  public:

  // optional int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Machine.MachineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t denomination_;
  int32_t count_;
  friend struct ::TableStruct_Machine_2eproto;
};
// -------------------------------------------------------------------

class MachineDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Machine.MachineDatas) */ {
 public:
  inline MachineDatas() : MachineDatas(nullptr) {}
  ~MachineDatas() override;
  explicit PROTOBUF_CONSTEXPR MachineDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachineDatas(const MachineDatas& from);
  MachineDatas(MachineDatas&& from) noexcept
    : MachineDatas() {
    *this = ::std::move(from);
  }

  inline MachineDatas& operator=(const MachineDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachineDatas& operator=(MachineDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachineDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachineDatas* internal_default_instance() {
    return reinterpret_cast<const MachineDatas*>(
               &_MachineDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MachineDatas& a, MachineDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(MachineDatas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachineDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MachineDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MachineDatas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachineDatas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachineDatas& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineDatas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Machine.MachineDatas";
  }
  protected:
  explicit MachineDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMdataFieldNumber = 1,
  };
  // repeated .Machine.MachineData Mdata = 1;
  int mdata_size() const;
  private:
  int _internal_mdata_size() const;
  public:
  void clear_mdata();
  ::Machine::MachineData* mutable_mdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Machine::MachineData >*
      mutable_mdata();
  private:
  const ::Machine::MachineData& _internal_mdata(int index) const;
  ::Machine::MachineData* _internal_add_mdata();
  public:
  const ::Machine::MachineData& mdata(int index) const;
  ::Machine::MachineData* add_mdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Machine::MachineData >&
      mdata() const;

  // @@protoc_insertion_point(class_scope:Machine.MachineDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Machine::MachineData > mdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Machine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MachineData

// optional int32 denomination = 1;
inline bool MachineData::_internal_has_denomination() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MachineData::has_denomination() const {
  return _internal_has_denomination();
}
inline void MachineData::clear_denomination() {
  denomination_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t MachineData::_internal_denomination() const {
  return denomination_;
}
inline int32_t MachineData::denomination() const {
  // @@protoc_insertion_point(field_get:Machine.MachineData.denomination)
  return _internal_denomination();
}
inline void MachineData::_internal_set_denomination(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  denomination_ = value;
}
inline void MachineData::set_denomination(int32_t value) {
  _internal_set_denomination(value);
  // @@protoc_insertion_point(field_set:Machine.MachineData.denomination)
}

// optional int32 count = 2;
inline bool MachineData::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MachineData::has_count() const {
  return _internal_has_count();
}
inline void MachineData::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t MachineData::_internal_count() const {
  return count_;
}
inline int32_t MachineData::count() const {
  // @@protoc_insertion_point(field_get:Machine.MachineData.count)
  return _internal_count();
}
inline void MachineData::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void MachineData::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Machine.MachineData.count)
}

// -------------------------------------------------------------------

// MachineDatas

// repeated .Machine.MachineData Mdata = 1;
inline int MachineDatas::_internal_mdata_size() const {
  return mdata_.size();
}
inline int MachineDatas::mdata_size() const {
  return _internal_mdata_size();
}
inline void MachineDatas::clear_mdata() {
  mdata_.Clear();
}
inline ::Machine::MachineData* MachineDatas::mutable_mdata(int index) {
  // @@protoc_insertion_point(field_mutable:Machine.MachineDatas.Mdata)
  return mdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Machine::MachineData >*
MachineDatas::mutable_mdata() {
  // @@protoc_insertion_point(field_mutable_list:Machine.MachineDatas.Mdata)
  return &mdata_;
}
inline const ::Machine::MachineData& MachineDatas::_internal_mdata(int index) const {
  return mdata_.Get(index);
}
inline const ::Machine::MachineData& MachineDatas::mdata(int index) const {
  // @@protoc_insertion_point(field_get:Machine.MachineDatas.Mdata)
  return _internal_mdata(index);
}
inline ::Machine::MachineData* MachineDatas::_internal_add_mdata() {
  return mdata_.Add();
}
inline ::Machine::MachineData* MachineDatas::add_mdata() {
  ::Machine::MachineData* _add = _internal_add_mdata();
  // @@protoc_insertion_point(field_add:Machine.MachineDatas.Mdata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Machine::MachineData >&
MachineDatas::mdata() const {
  // @@protoc_insertion_point(field_list:Machine.MachineDatas.Mdata)
  return mdata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Machine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Machine_2eproto
